\frametitle{Introduction}
\begin{itemize}
    \item \textbf{CSV Files:} A file format for storing tabular data in plain text. Encodings can vary, and line sizes can be inconsistent.
    \begin{lstlisting}[caption={CSV file}]
    1,2,3,4,5
    6,7,8,9,10
    11,12,13,14,15
    \end{lstlisting}
    \item \textbf{Encoding Table:} A mapping of bits to characters, such as ASCII or UTF-8.
    % \item In this work, we compare the performance of custom GPU parsers and cuDF CSV parsers for handling CSV files with varying line sizes, with a file containing 32-bit integers encoded in UTF-8, in a comma-separated format.
    % \item Comparison of different approaches:
    %   \begin{itemize}
    %     \item \textbf{Custom GPU Parser}: A tailor-made GPU solution to handle varying line sizes in CSVs.
    %     \item \textbf{cuDF CSV Parser}: A component of the RAPIDS cuDF library that leverages GPU acceleration. Cannot deal with varying line sizes in CSVs.
    %     \item \textbf{cuDF Parquet}: A GPU-accelerated Parquet parser compared with traditional CPU methods.
    %     \item \textbf{CPU Methods}: Traditional CPU-based methods for parsing CSV.
    %   \end{itemize}
    % \item Objective: To analyze performance differences, throughput, and potential trade-offs.
  \end{itemize}

  \begin{figure}
    \includegraphics[width=0.6\textwidth]{image copy.png}
    \caption{Encoding Table}
  \end{figure}
